
/******************************************************************************
**                                                                           **
**   DO NOT EDIT THIS FILE!                                                  **
**   This is a auto generation file from data tool.                          **
**                                                                           **
******************************************************************************/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Reflection;

public class SHDataContainer
{
    public List<SHCharacter> Character = new List<SHCharacter>();
    public List<SHEnemy> Enemy = new List<SHEnemy>();
    public List<SHBullet> Bullet = new List<SHBullet>();

    public void LoadData<T>(string resourceName, List<T> list) where T : new()
    {
        byte[] bytes = ResourceHelper.LoadGameData(resourceName);
        SimpleEncrypter.Descryption(ref bytes);
        int seek = 0;
        int szValueData = BitConverter.ToInt32(bytes, seek);
        seek += sizeof(int);
        byte[] valueDataBytes = new byte[szValueData];
        Array.Copy(bytes, seek, valueDataBytes, 0, szValueData);
        seek += szValueData;
        int szData = BitConverter.ToInt32(bytes, seek);
        seek += sizeof(int);
        byte[] dataBytes = new byte[szData];
        Array.Copy(bytes, seek, dataBytes, 0, szData);

        // values
        List<Pair<int, string>> valueTypeList = new List<Pair<int, string>>();
        seek = 0;
        int colCount = BitConverter.ToInt32(valueDataBytes, seek);
        seek += sizeof(int);
        for (int i = 0; i < colCount; ++i)
        {
            Pair<int, string> pair = new Pair<int, string>();
            int valueType = BitConverter.ToInt32(valueDataBytes, seek);
            seek += sizeof(int);
            pair.first = valueType;
            int szValueName = BitConverter.ToInt32(valueDataBytes, seek);
            seek += sizeof(int);
            byte[] valueNameBytes = new byte[szValueName];
            Array.Copy(valueDataBytes, seek, valueNameBytes, 0, szValueName);
            seek += szValueName;
            pair.second = Encoding.Default.GetString(valueNameBytes);
            valueTypeList.Add(pair);
        }

        // start data
        seek = 0;
        int rowCount = BitConverter.ToInt32(dataBytes, seek);
        seek += sizeof(int);
        for (int r = 0; r < rowCount; ++r)
        {
            // start row
            int szRow = BitConverter.ToInt32(dataBytes, seek);
            seek += sizeof(int);
            byte[] rowBytes = new byte[szRow];
            Array.Copy(dataBytes, seek, rowBytes, 0, szRow);
            seek += szRow;
            T data = new T();
            int seekRow = 0;
            seekRow += sizeof(int);
            for (int c = 0; c < colCount; ++c)
            {
                // start col
                int szCol = BitConverter.ToInt32(rowBytes, seekRow);
                seekRow += sizeof(int);
                byte[] colBytes = new byte[szCol];
                Array.Copy(rowBytes, seekRow, colBytes, 0, szCol);
                seekRow += szCol;
                Pair<int, string> pair = valueTypeList[c];
                int szValue  = BitConverter.ToInt32(colBytes, sizeof(int));
                byte[] valueBytes = new byte[szValue];
                Array.Copy(colBytes, sizeof(int) * 2, valueBytes, 0, szValue);
                FieldInfo fi = data.GetType().GetField(pair.second);
                switch (pair.first)
                {
                    case 1:
                        fi.SetValue(data, BitConverter.ToInt32(valueBytes, 0));
                        break;
                    case 2:
                        fi.SetValue(data, BitConverter.ToSingle(valueBytes, 0));
                        break;
                    case 3:
                        fi.SetValue(data, Encoding.UTF8.GetString(valueBytes));
                        break;
                    case 4:
                        fi.SetValue(data, BitConverter.ToBoolean(valueBytes, 0));
                        break;
                }
                // end col
            }
            list.Add(data);
            // end row
        }
        // end data
    }

    public void LoadAllData()
    {
        LoadData<SHCharacter>("Character", Character);
        LoadData<SHEnemy>("Enemy", Enemy);
        LoadData<SHBullet>("Bullet", Bullet);
    }
}


public class SHCharacter
{
    public int ID;
    public int Hp;
    public int BulletID;
    public string ResourceName;
}


public class SHEnemy
{
    public int ID;
    public int Hp;
    public int BulletID;
    public string ResourceName;
}


public class SHBullet
{
    public int ID;
    public int Damage;
    public string ResourceName;
}

